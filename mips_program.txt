1080000d
00000000
80850000
00000000
10a00007
00001025
24840001
38a30020
80850000
0003182b
14a0fffb
00431021
03e00008
00000000
03e00008
2402ffff

0  : BEQ $a1 $zero 0x000d  //si le deuxieme argument de la fonction est nul saut a 38
4  : NOP
8  : LB $a1 0x0000 $a0  //a1<-Mem[a0] avec extenion de signe
c  : NOP
10 : BEQ $a1 $zero 0x0007  //si a1 est nul on jump a 30
14 : OR $v0 $zero $zero    // vo recoit 0
18 : ADDIU $a0 $a0 0x0001  // a0<-a0+1
1c : XORI $v1 $a1 0x0020   //v1<-a1 XOR 0x20
20 : LB $a1 0x0000 $a0    //a1<-Mem[a0] avec extension de signe
24 : SLTU $v1 $zero $v1   //si v1>0 v1=1 sinon v1=0
28 : BNE $a1 $zero 0xFFFB //si a1!=0 saut a 18
2c : ADDU $v0 $v0 $v1     //v0=v0+v1 (non signÃ©)
30 : JR $ra               //sort de la fonction
34 : NOP
38 : JR $ra               //sort de la fonction
3c : ADDIU $v0 $zero 0xFFFF

f(a0, a1)
{
    if(a1 == 0) return -1;
    
    a1 = *a0

    if(a1 == 0) return;

    v0 = 0;

    do
    {
/*
        v1 = a1 xor 0x20;

        if(v1 > 0) v1 = 1;
        else       v1 = 0;

        v0 = v0 + v1;
*/

        if(a1 != 0x20) v0++;

        a0 ++; 
        a1 = *a0;
    }
    while(a1 != 0);
}

c = 0x000000xx 
xor 0x00000020 
=   0x000000
